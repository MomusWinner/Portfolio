services:
  backend:
    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:4000:4000
    volumes:
      - ./:/usr/src/app
    depends_on:
      migrate:
        condition: service_completed_successfully
      database:
        condition: service_healthy
    environment:
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
      DB_PORT: 5432
      DB_HOST: database 
      DB_SSL: ""

  frontend:
    restart: unless-stopped
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend/:/usr/src/app
    ports:
      - 127.0.0.1:3000:3000

  database:
    image: postgres:17.4-alpine3.21
    restart: unless-stopped
    ports:
      - 127.0.0.1:5432:5432
    healthcheck:
        test: [ "CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}" ]
        interval: 1s
        timeout: 1s
        retries: 60
    volumes:
      - database-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}

  migrate:
    image: migrate/migrate
    command: ["-source=file://migrations", "-database",  "postgres://test:test@database:5432/test_db?sslmode=disable", "up"]
    restart: on-failure
    volumes:
      - ./backend/migrations:/migrations
    depends_on:
      database:
        condition: service_healthy

  caddy:
    image: caddy:2.10.2
    restart: unless-stopped
    ports:
      - "7080:7080"
      # - "80:80"
      # - "7443:443"
      # - "7443:443/udp"
    volumes:
      - ./conf:/etc/caddy
      - caddy_data:/data
      - caddy_config:/config

volumes:
  database-data:
  caddy_data:
  caddy_config:
